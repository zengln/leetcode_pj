# -*- coding:utf-8 -*-
# @Time    : 2021/8/13 9:35
# @Author  : zengln
# @File    : 不同路径.py

# 一个机器人位于一个 m x n 网格的左上角 （起始点在下图中标记为 “Start” ）。
#
#  机器人每次只能向下或者向右移动一步。机器人试图达到网格的右下角（在下图中标记为 “Finish” ）。
#
#  问总共有多少条不同的路径？
#
#
#
#  示例 1：
#
#
# 输入：m = 3, n = 7
# 输出：28
#
#  示例 2：
#
#
# 输入：m = 3, n = 2
# 输出：3
# 解释：
# 从左上角开始，总共有 3 条路径可以到达右下角。
# 1. 向右 -> 向下 -> 向下
# 2. 向下 -> 向下 -> 向右
# 3. 向下 -> 向右 -> 向下
#
#
#  示例 3：
#
#
# 输入：m = 7, n = 3
# 输出：28
#
#
#  示例 4：
#
#
# 输入：m = 3, n = 3
# 输出：6
#
#
#
#  提示：
#
#
#  1 <= m, n <= 100
#  题目数据保证答案小于等于 2 * 109
#
#  Related Topics 数学 动态规划 组合数学
#  👍 1080 👎 0



class Solution:
    """
    使用一个二维数组记录，到当前点(i,j)的路径个数
    到某个点(i,j)的方式有两个, 从(i,j-1)向右移动或者从(i-1,j)向下移动
    所以
    dp[i][j] = dp[i][j-1] + dp[i-1][j]
    边界值：
    i = 0
    dp[0][j] = dp[0][j-1]
    j = 0
    dp[i][0] = dp[i-1][0]
    介于到dp[1][0]的路径为1，dp[1][0] = dp[0][0] = 1,直接初始化所有路径为1
    """
    def uniquePaths(self, m: int, n: int) -> int:
        dp = [[1] * n for _ in range(m)]

        for i in range(1, m):
            for j in range(1, n):
                dp[i][j] = dp[i][j-1] + dp[i-1][j]

        return dp[m-1][n-1]

