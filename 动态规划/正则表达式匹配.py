# -*- coding:utf-8 -*-
# @Time    : 2021/9/3 15:35
# @Author  : zengln
# @File    : 正则表达式匹配.py

# 给你一个字符串 s 和一个字符规律 p，请你来实现一个支持 '.' 和 '*' 的正则表达式匹配。
#
#
#  '.' 匹配任意单个字符
#  '*' 匹配零个或多个前面的那一个元素
#
#
#  所谓匹配，是要涵盖 整个 字符串 s的，而不是部分字符串。
#
#
#  示例 1：
#
#
# 输入：s = "aa" p = "a"
# 输出：false
# 解释："a" 无法匹配 "aa" 整个字符串。
#
#
#  示例 2:
#
#
# 输入：s = "aa" p = "a*"
# 输出：true
# 解释：因为 '*' 代表可以匹配零个或多个前面的那一个元素, 在这里前面的元素就是 'a'。因此，字符串 "aa" 可被视为 'a' 重复了一次。
#
#
#  示例 3：
#
#
# 输入：s = "ab" p = ".*"
# 输出：true
# 解释：".*" 表示可匹配零个或多个（'*'）任意字符（'.'）。
#
#
#  示例 4：
#
#
# 输入：s = "aab" p = "c*a*b"
# 输出：true
# 解释：因为 '*' 表示零个或多个，这里 'c' 为 0 个, 'a' 被重复一次。因此可以匹配字符串 "aab"。
#
#
#  示例 5：
#
#
# 输入：s = "mississippi" p = "mis*is*p*."
# 输出：false
#
#
#
#  提示：
#
#
#  0 <= s.length <= 20
#  0 <= p.length <= 30
#  s 可能为空，且只包含从 a-z 的小写字母。
#  p 可能为空，且只包含从 a-z 的小写字母，以及字符 . 和 *。
#  保证每次出现字符 * 时，前面都匹配到有效的字符
#
#  Related Topics 递归 字符串 动态规划
#  👍 2336 👎 0


class Solution:
    """
    dp[i][j]表示 s到i为止,p到j为止的匹配结果
    当 p[j] == s[i]：dp[i][j] = dp[i-1][j-1]
    当 p[j] == '.':  dp[i][j] = dp[i-1][j-1]
    当 p[j] == '*':
    * 需要和前一个字符 p[j-1] 一起来看,把他们两个当成一个整体：
    p[j-1]可能为字符：
    p[j-1]为字符时：                                       无字符匹配     一个字符      多个字符
    1. p[j-1] == s[i] 说明*表示一个或者多个字符：dp[i][j] = dp[i][j-2] or dp[i][j-1] or dp[i-1][j]
    2. p[j-1] != s[i] 说明*表示0个字符，p[j-1]需要抛弃：dp[i][j] = dp[i][j-2]
    p[j-1]可能为'.':
    与 p[j-1] 为字符的情况1相同
    """
    def isMatch(self, s: str, p: str) -> bool:
        m = len(s)
        n = len(p)
        dp = [[False] * (n+1) for _ in range(m+1)]
        # s 与 p 为空时，一定匹配
        dp[0][0] = True
        for i in range(1, n):
            if p[i] == "*":
                dp[0][i+1] = dp[0][i-1]

        for i in range(m):
            for j in range(n):
                if p[j] == s[i] or p[j] == ".":
                    dp[i+1][j+1] = dp[i][j]
                elif p[j] == "*":
                    if p[j-1] == s[i] or p[j-1] == ".":
                        dp[i+1][j+1] = dp[i+1][j-1] or dp[i+1][j] or dp[i][j+1]
                    else:
                        dp[i+1][j+1] = dp[i+1][j-1]

        return dp[-1][-1]


